const fs = require('fs');
const fsPromises = fs.promises;
const path = require('path');
const _BaseDir = path.dirname(require.main.filename);
const settingFilePath = `${_BaseDir}/setting/`;
const autoGeneratedFilePath = `${settingFilePath}auto_generated/`;
const dbConnection = require(`${_BaseDir}/setting/db.${process.env.NODE_ENV}.json`);

class Config {
	
	static HostNameForBackgroundTask;
	static DB_Connection_Config = dbConnection;
	static oDataURL;
	static serviceName = "Service Name";
	static Port = 7100;
	static KioskVersion = 1.84;
	static KAPSApiToken = "Put APIToken Here";
	static SesstionSalt = "Put Session Salt Here";
	static PasswordSalt = "Put Password Sale Here"; /* DO NOT change this value when it is in production mode */
	static LoginSessionTimeout = 1000 * 60 * 30;
	static LoginSessionTimeoutExceptionIDs = ['Insert_ID_Here'];
	static permission = {};

	static async initSetting(Server = {
		Env: process.env.NODE_ENV
	}) {
		// this.DB_Connection_Config = JSON.parse(await fs.readFileSync(`setting/db.${process.env.NODE_ENV}.json`));
		if(Server.Env == 'production') {
			/*
			[HostNameForBackgroundTask]
			** The file 'backgroundJobs.js' file is out of scope of express engine.
			** Which means there is no way to distinguish via URL string because it will be executed only once when Halo app is started at the beginning.
			** We will use hostname function to know where we are working on.
			*/
			this.HostNameForBackgroundTask = "Background Task Name";
			this.oDataURL = "https://backgrounTaskAPIUrl";
		} else {
			// ** If you want to run backgroundJobs in your computer, make sure "HostNameForBackgroundTask" value is matched with your computer name in development variable.
			this.HostNameForBackgroundTask = "Background Task Name";
			this.oDataURL = "https://backgrounTaskAPIUrl";
		}

		// This will generate JSON files if does not exist
		await this.generateSettingJson(true);
		await this.#loadAutoGeneratedSettings();
		
	}

	static async #loadAutoGeneratedSettings(fileName) {
		if(typeof fileName !== "undefined") await this.#loadAutoGeneratedFile(fileName);
		else {
			for(var i in this.jsonSettings) {
				await this.#loadAutoGeneratedFile(i);
			}
		}
		
	}
	static async #loadAutoGeneratedFile(fileName) {
		var self = this;
		var settingFileName = `${autoGeneratedFilePath + fileName}.json`;
		
		fs.readFile(settingFileName, 'utf8', async (err, data) => {
			if (err) throw err;
			self[fileName] = JSON.parse(data);
		});
	}

	static jsonSettings = {
		'permission': async () => {
			const PageModel = require(`${_BaseDir}/mvc/model/page`);
			const allPages = await PageModel.getAllPages();
			var json = {};
			for(var i=0;allPages.length > i;i++) {
				if(allPages[i]['need_access_permission'])
					json[allPages[i]['page_url']] = {
						'role_id': (`${allPages[i]['role_id']}`).split(',').map((i) => { return Number(i); })
					}
					
			}
		
			return JSON.stringify(json);
		},
		'menu': async () => {
			const PageModel = require(`${_BaseDir}/mvc/model/page`);
			const allPages = await PageModel.getAllPages();
			var json = {};

			for(var i=0;allPages.length > i;i++) {
				if(typeof json[allPages[i]['category_name']] === "undefined") json[allPages[i]['category_name']] = {};
				if(typeof json[allPages[i]['category_name']][allPages[i]['page_name']] === "undefined") json[allPages[i]['category_name']][allPages[i]['page_name']] = {};
				
				json[allPages[i]['category_name']][allPages[i]['page_name']] = {
					'page_url': allPages[i]['page_url'],
					'need_access_permission': allPages[i]['need_access_permission'],
					'role_id': (`${allPages[i]['role_id']}`).split(',').map((i) => { return Number(i); })
				};
				
			}
		
			return JSON.stringify(json);
		}
	};

	static async generateSettingJson(isThisCallingFromInitSetting = false) {
		
		var generatedFile = false;
		var generatedFileName = [];

		if(!fs.existsSync(autoGeneratedFilePath)) fs.mkdirSync(autoGeneratedFilePath);

		
		for(var i in this.jsonSettings) {
			
			var shouldGenerateFile = true;
			var settingFileName = `${autoGeneratedFilePath + i}.json`;

			if(isThisCallingFromInitSetting && fs.existsSync(settingFileName)) shouldGenerateFile = false;

			if(shouldGenerateFile) {
				var jsonData = await this.jsonSettings[i]();
				generatedFileName.push(i + '.json');
				await fsPromises.writeFile(settingFileName, jsonData , 'utf8');
				await this.#loadAutoGeneratedSettings(i);
				generatedFile = true;
			}
		}
		if(generatedFile) {
			console.log(`â•  Generated json setting files(${generatedFileName.join(',')}) in '/setting/auto_generated/' folder`);
		}
	}
}

module.exports = Config;